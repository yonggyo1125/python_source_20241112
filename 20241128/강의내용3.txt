정규 표현식 살펴보기
1. 정규 표현식은 왜 필요한가?
(Regular Expression) 
import re
	- compile("정규표현식 패턴")
	- match : 첫번째 문자부터 패턴을 체크, 매칭되는 첫번째 요소
	- search : 전체에서 문자 패턴을 체크 (.*패턴.*) : 패턴이 포함되어 있는지를 체크, 매칭되는 첫번째 요소
	- findall : 패턴에 매칭되는 문자열 전체를 리스트 형태로 반환
	- finditer :  이터레이터, 반복자 형태 객체 매칭된 객체
			이터레이터
				- 내부에서 반복할때마다 이동 위치 기록(커서)
				- 요소를 꺼내오고, 한번 반복하면 더이상 반복 불가능한 패턴 
				- iter(반복 가능한 객체) : 이터레이터 객체 생성
				- 요소를 하나씩 꺼내오는 함수 next(..)
				- 반복을 다하면 StopIteration 예외 발생
				
	- sub  : 문자열 교체

정규 표현식 시작하기
1. 정규 표현식의 기초, 메타 문자
 . ^ $ * + ? { } [ ] \ | ( )
 - 패턴의 기능과 관련있는 특수한 문자!
 - 패턴의 기능으로 사용하지 않고 그냥 문자 그대로 쓰는 경우!  - \ :이스케이프 문자
	$ -> \$
1) [ ] 문자 - 문자 클래스
	- 문자 하나하나
	- 예) [abc]  - a문자 하나에 매칭되면 통과
				   - b문자 하나에 매칭되면 통과
				   - c문자 하나에 매칭되면 통과 
				   
2) 자주 사용하는 문자 클래스
	\d - [0-9]
	\D - [^0-9]       [^문자1] -> 문자1이 아닌 모든 문자 
	\s  - 공백 [\s\n\t\f\r]
			[\s] - 공백 문자 한개
			[\n] - 줄 개행 
			[\t] - 탭키를 한번 누른것 
	\S  - 공백이 아닌 문자 [^\s\n\t\f\r]
	\w  - 단어 한개 [a-zA-Z0-9_]
			참고) 한글을 포함한 단어 한개 
				[a-zA-Z0-9_ㄱ-ㅎ가-힣]
	\W - 단어가 아닌 패턴 [^a-zA-Z0-9_]
	
3) .(dot) 문자 - \n을 제외한 모든 문자 한개
			참고) \n  : 줄개행 문자
	
4) * 문자
		- 패턴{0,} : 0개 이상의 모든 패턴(있어도 되고, 없어도 된다., 있을때는 갯수 제한 없다)
5) + 문자
		- 패턴{1,} : 1개 이상의 모든 패턴(최소 1번은 반복 되는 패턴)
		
6) {} 문자와 ? 문자
- {m} 
	- 패턴{숫자}  - 패턴을 숫자만큼 반복
					 - \d{3} : 3자리 숫자
					 - .{3} : 문자 3개 
- {m, n}
	- 패턴{2,5}   - 패턴이 최소 2번 최대 5번 반복 
	
- {m,}
	- 패턴{2,}  - 패턴이 최소 2번 이상 반복 
	
- ? 
		패턴{0,1} : 패턴이 있어도 되고 없어도 된다. 있을때는 1번 반복
		\D{0,1} -> \D? -> 숫자가 아닌 문자가 있어도 되고 없어도 된다!

네이버 웹페이지 HTML 가져와서 -> 정규표현식으로 이미지 태그만 추출 	
	
패턴 가장 앞에 ^패턴 : 패턴으로 시작하는 패턴! / 패턴 문장 가장 앞에 위치
	참고) 문자클래스에서 ^는 다른 의미!
		[^a-z] : a-z가 아닌 문자!
		
문장 끝에 패턴$ : 패턴으로 끝나는 패턴! / 문장 가장 끝에 위치
	
	참고)
		conda install requests 
	
2. 파이썬에서 정규 표현식을 지원하는 re 모듈
3. 정규식을 이용한 문자열 검색
1) match : 첫번쨰 문자 부터 검색
2) search : 문자열 전체를 검색 - 포함조건(.*패턴.*), 매칭된 첫번째만 찾는다. match 객체 반환
3) findall : 전체를 검색하고 패턴에 매칭된 모든 요소를 리스트 형태로 반환 
4) finditer : 전체를 검색하고 패넡에 매칭된 모든 요소를 가져오는데, 이터레이터 객체 형태로 반환 
				(match객체를 반환)

참고)
	이터레이터(반복자 패턴 구현 사례)
	iter(반복 가능한 요소 ... - 리스트, 튜플, 문자열 ...)
		- next(객체 참조변수)  - 커서 이동하면서 하나씩 꺼내온다!
		- 끝에 도달한 경우 - StopIteration 예외가 발생
	
	제너레이터 : 대용량 데이터를 처리할때 
		yield 값
		
4. match 객체의 메서드
1) group : 
	group() - 매칭된 전체 데이터
	참고) group(1) - 1번 그룹핑 데이터 (....)
			group(2) - 2번 그룹핑 데이터 (....)
2) start : 찾은 시작 위치 
3) end : 찾은 종료 위치
4) span : (start, end)
5) 모듈 단위로 수행하기
	re.match("패턴", "데이터")
	re.search("패턴", "데이터")
	
5. 컴파일 옵션
1) DOTALL, S
2) IGNORECASE, I
3) MULTILINE, M
4) VERBOSE, X

6. 역슬래시 문제
