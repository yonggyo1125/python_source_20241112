예외처리 
1. 예외는 언제 발생하는가?
	오류(Error) : 시스템 오류 , 메모리 부족 - 통제 불가능 문제 
	예외(Exception) : 코드 상의 문제 - 통제 가능

2. 예외 예외 처리 기법
	예외를 왜 처리해야 할까?
	- 서비스의 중단을 막고 적절한 대안적인 처리를 하기 위한 목적 
	
1) try-except 문
try:
	// 예외가 발생할 가능성이 있는 코드 
	
except: 
	// 예외가 발생하면 대안적인 처리를 할 수 있는 구간 
	
2) try-except만 쓰는 방법
3) 발생 오류만 포함한 except 문
4) 발생 오류와 오류 변수까지 포함한 except 문
5) try-finally 문
try:

finally: 
	예외가 발생하든 하지 않든 무조건 실행되는 구간 
	함수 내에서 return 이후에도 무조건 실행 
		- return : 함수의 연산 종료!

참고)
open("파일 경로", "처리 모드")	
	처리 모드
		r : 파일 내용 읽기 
		w : 파일 내용 쓰기
		a : 내일 내용에 끝에 추가하기
	
	- 파일을 다루기 위해서는 이 데이터를 담을 수 있는 메모리가 필요(시스템 자원이 필요!)
	- write("텍스트 데이터")  -> 파일로 데이터를 작성
	- read() : 파일 데이터를 읽어오기
	
6) 여러 개의 오류 처리하기
try:

...

except ... : 

except ... :

7) try-else 문
	: 예외가 발생하지 않을때 실행될 구간 

try:
	// 예외가 발생하지도 모르는 코드 
	
except ... : 
	// 예외 발생시 유입되고, 수행되는 코드 
else : 	
	// 예외가 발생하지 않았을때 수행되는 코드
	
8) 오류 회피하기
	pass
9) 오류 일부러 발생시키기
	예외 발생 
	raise 예외 클래스
	
	참고)
	 NotImplementedError  : 구현되지 않음
								      -  부모클래스에서 공유하는 메서드 중에서 반드시 하위 클래스가 구현을 꼭 해서 사용해야 하는 경우(메서드 재정의 강제하는 경우)
	
	Bird : 새의 일반적인 개념
	Eagle : 구체적인 새(독수리) 개념
	Sparrow
	
10) 예외 만들기
	- Exception 클래스를 상속 받으면 예외 클래스가 된다!
	
	
정리 

예외 - 통제 가능(코드상의 문제), 오류

예외 처리
- 왜?  서비스 중단을 막고 적절한 정상적인 수행을 위한 처리를 하기 위한 것

try:
	// 예외가 발생할 가능성이 있는 코드 
	
except 예외 클래스 as 변수명(e): 
	// 예외가 발생했을때 유입되는 구간, 적절한 처리
	
except .... :    # 다중 예외 처리


try:


except Exception as e:  # 어떠한 예외가 발생하는지 잘 모르겠다... Exception


try:

except (예외 클래스1, 예외 클래스2, ... ) as e:


try:

finally: 예외가 발생하든 안하든 무조건 실행
		  함수 안에서 return을 해도 무조건 실행
		  
else:
	예외가 발생하지 않아야 실행 
	
	
예외 클래스를 정의 - Exception 상속

- 클래스에 대한 복습
- 용도, 목적
- 클래스 : 객체를 만들기 위한 명세서
		- 떡볶이 만드는 레서피  : 클래스 
			재료(변수 정의), 만든 방법(함수 정의)
			
		- 떡볶이  : 객체
		

변수 : 연산을 위한 값을 담을 수 있는 공간(메모리)
		- 변수를 선언하는 목적은 연산을 위한 값을 담는 것 
컴퓨터(Computer - 계산기)


raise NotImplementedError
	- 부모클래스에 정의된 메서드는 그냥 지켜야할 규칙, 원칙
	- 직접 부모클래스의 메서드를 쓰지 말고, 하위 클래스에서 재정의해서 써라!
	- 하위클래스의 메서드 재정의 강제!